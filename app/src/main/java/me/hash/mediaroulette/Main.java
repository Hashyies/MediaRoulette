/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package me.hash.mediaroulette;

import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.cdimascio.dotenv.Dotenv;
import io.github.cdimascio.dotenv.DotenvEntry;
import me.hash.mediaroulette.bot.Bot;
import me.hash.mediaroulette.utils.Database;

public class Main {

    public static Dotenv env;
    public static Database database;
    public static List<String> CHOICES_BOT = new ArrayList<>();

    public static void main(String[] args) throws Exception {
        // Get an InputStream for the .env file
        InputStream inputStream = Main.class.getClassLoader().getResourceAsStream(".env");

        // Create a temporary file to hold the contents of the .env file
        Path tempFile = Files.createTempFile("dotenv", ".env");
        tempFile.toFile().deleteOnExit();

        // Copy the contents of the .env file to the temporary file
        Files.copy(inputStream, tempFile, StandardCopyOption.REPLACE_EXISTING);

        env = Dotenv.configure()
                .directory(tempFile.getParent().toString())
                .filename(tempFile.getFileName().toString())
                .load();

        database = new Database(Main.getEnv("MONGODB_CONNECTION"), "MediaRoulette");
        new Bot(getEnv("DISCORD_TOKEN"));

        init();
    }

    static void init() {
        Set<DotenvEntry> entries = env.entries();
        Map<String, String> configMap = new HashMap<>();
        configMap.put("DISCORD_NSFW_WEBHOOK", "NSFW_WEBHOOK");
        configMap.put("DISCORD_SAFE_WEBHOOK", "SAFE_WEBHOOK");
        configMap.put("GENERATED_VOICE_CHANNEL", "GENERATED_VOICE_CHANNEL");

        for (Map.Entry<String, String> entry : configMap.entrySet()) {
            String envKey = entry.getKey();
            String configKey = entry.getValue();
            if (containsKey(entries, envKey)) {
                System.out.println(envKey + " Loaded!");
                Bot.config.set(configKey, Bot.config.getOrDefault(configKey, true, Boolean.class));
            } else {
                System.out.println(envKey + " Not found in .env");
                Bot.config.set(configKey, false);
            }
        }

        // Check for Reddit credentials
        checkCredentials(entries, "REDDIT", "REDDIT_CLIENT_ID", "REDDIT_CLIENT_SECRET", "REDDIT_USERNAME",
                "REDDIT_PASSWORD");

        // Check for Google credentials
        checkCredentials(entries, "GOOGLE", "GOOGLE_API_KEY", "GOOGLE_CX");
    }

    private static void checkCredentials(Set<DotenvEntry> entries, String configKey, String... keys) {
        boolean allKeysPresent = true;
        for (String key : keys) {
            if (!containsKey(entries, key)) {
                allKeysPresent = false;
                break;
            }
        }
        if (allKeysPresent) {
            System.out.println(configKey + " Loaded!");
            Bot.config.set(configKey, Bot.config.getOrDefault(configKey, true, Boolean.class));
        } else {
            System.out.println(configKey + " credentials are not set in .env");
            Bot.config.set(configKey, false);
        }
    }

    public static boolean containsKey(Set<DotenvEntry> entries, String key) {
        for (DotenvEntry entry : entries) {
            if (entry.getKey().equals(key)) {
                return true;
            }
        }
        return false;
    }

    public static String getEnv(String key) {
        return env.get(key);
    }
}